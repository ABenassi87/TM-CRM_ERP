"use strict";

/**
 * Module dependencies.
 */
var mongoose = require('mongoose'),
        Schema = mongoose.Schema,
        timestamps = require('mongoose-timestamp');

var Dict = INCLUDE('dict');

var setPrice = function (value) {
    return MODULE('utils').setPrice(value);
};

/**
 * Article Schema
 */
var orderSupplierSchema = new Schema({
    ref: {type: String, unique: true},
    Status: {type: String, default: 'NEW'},
    title: {//For internal use only
        ref: String,
        autoGenerated: {type: Boolean, default: false}, //For automatic process generated bills
    },
    supplier: {
        id: {type: Schema.Types.ObjectId, ref: 'Societe'},
        name: String,
        isNameModified: {type: Boolean}
    },
    contact: {id: {type: Schema.Types.ObjectId, ref: 'Contact'}, name: String},
    ref_supplier: {type: String},
    datec: {type: Date},
    notes: [{
            author: {
                id: {type: String, ref: 'User'},
                name: String
            },
            datec: Date,
            note: String
        }],
    total_ht: {type: Number, default: 0, set: setPrice},
    total_tva: [
        {
            tva_tx: Number,
            total: {type: Number, default: 0}
        }
    ],
    total_ttc: {type: Number, default: 0},
    shipping: {type: Number, default: 0},
    author: {id: String, name: String},
    entity: {type: String},
    lines: [{
            qty: Number,
            tva_tx: Number,
            pu_ht: Number,
            description: String,
            product_type: String,
            product: {
                id: {type: Schema.Types.ObjectId, ref: "Product"},
                name: {type: String},
                label: String,
                template: {type: String, default: "/partials/lines/classic.html"}
                //family: String
            },
            total_tva: Number,
            total_ttc: Number,
            total_ht: {type: Number, set: setPrice},
            discount: {type: Number, default: 0},
            optional: {}
        }],
    history: [{date: Date, author: {id: String, name: String}, Status: Schema.Types.Mixed}],
    optional: {}
}, {
    toObject: {virtuals: true},
    toJSON: {virtuals: true}
});

orderSupplierSchema.plugin(timestamps);

/**
 * Pre-save hook
 */
orderSupplierSchema.pre('save', function (next) {

    var SeqModel = MODEL('Sequence').Schema;
    var EntityModel = MODEL('entity').Schema;
    var self = this;
    
    MODULE('utils').sumTotal(this.lines, this.shipping, this.discount, this.supplier.id, function (result) {
        self.total_ht = result.total_ht;
        self.total_tva = result.total_tva;
        self.total_ttc = result.total_ttc;
    
    if (self.isNew) {
        EntityModel.findOne({_id: self.entity}, "cptRef", function (err, entity) {
            if (err)
                console.log(err);

            if (entity && entity.cptRef) {
                SeqModel.inc("CF" + entity.cptRef, self.datec, function (seq) {
                    //console.log(seq);
                    self.ref = "CF" + entity.cptRef + seq;
                    next();
                });
            } else {
                SeqModel.inc("CF", self.datec, function (seq) {
                    //console.log(seq);
                    self.ref = "CF" + seq;
                    next();
                });
            }
        });
    } else
        next();
    });
});

var statusList = {};
Dict.dict({dictName: "fk_order_status_supplier", object: true}, function (err, docs) {
    statusList = docs;
});

orderSupplierSchema.virtual('status')
        .get(function () {
            var res_status = {};

            var status = this.Status;

            //console.log("status :" + status);

            if (status && statusList.values[status].label) {
                //console.log(this);
                res_status.id = status;
                //res_status.name = i18n.t("orders:" + statusList.values[status].label);
                res_status.name = statusList.values[status].label;
                res_status.css = statusList.values[status].cssClass;
            } else { // By default
                res_status.id = status;
                res_status.name = status;
                res_status.css = "";
            }
            return res_status;

        });

exports.Schema = mongoose.model('orderSupplier', orderSupplierSchema, 'OrderSupplier');
exports.name = "orderSupplier";
