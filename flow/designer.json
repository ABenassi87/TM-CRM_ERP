{"tabs":[{"id":"1498552695920","name":"Products / Prices","icon":"fa-object-ungroup","linker":"products-prices","index":0},{"name":"Orders","linker":"orders","id":"1498565673952","index":1},{"name":"Delivery","linker":"delivery","id":"1499065218412","index":2}],"components":[{"component":"redissubscribe","state":{"text":"","color":"gray"},"x":18,"y":172,"tab":"1498552695920","connections":{"0":["1498565569369"]},"id":"1498562933261","options":{"channel":"product:*"},"name":"product","reference":"update","errors":{}},{"component":"debug","state":{"text":"Disabled","color":"gray"},"x":1145,"y":146,"tab":"1498552695920","connections":{},"id":"1498563854903","options":{"enabled":false},"name":"Debug","errors":{}},{"component":"condition","state":{"text":"","color":"gray"},"x":563,"y":196,"tab":"1498552695920","connections":{"0":["1499197169944","1499197677684","1499198597901"]},"id":"1498565569369","options":{"output":1,"condition":"// Next has to contain an index for output (null/undefiend) will cancel current data\n\nif(!value.product || !value.product._id)\n    return next();\n\nnext(0);"},"name":"isProduct","output":1,"reference":"","errors":{}},{"component":"functiontm","state":{"text":"","color":"gray"},"x":470,"y":580,"tab":"1498552695920","connections":{"0":["1498739891221"]},"id":"1498664643692","options":{"code":"function(data, instance, callback) {\n    var family = data.family;\n    var ProductModel = MODEL('product').Schema;\n    var round = MODULE('utils').round;\n    var async = require('async');\n    \n    instance.debug(\"Update products with this family\",\"info\");\n        \n    ProductModel.find({ sellFamily: family._id }, function(err, docs) {\n       \tasync.each(docs, function(elem, aCb) {\n       \t\telem.indirectCost = round(elem.directCost * family.indirectCostRate / 100, 3);\n           \telem.editedBy = data.userId;\n            elem.save(aCb);\n       \t}, function(err){\n       \t\tif (err)\n           \t\treturn callback(\"update productFamily error \", err);\n           \tcallback(null, 0, data);\n      \t});\n    });\n};","output":1,"outputs":1},"name":"UpdateIndirectCostRate","reference":"","output":1,"errors":{}},{"component":"functiontm","state":{"text":"","color":"gray"},"x":500,"y":371,"tab":"1498552695920","connections":{"0":["1498739891221"],"1":["1499200807694"]},"id":"1498735846662","options":{"code":"function(data, instance, callback) {\n    var ProductModel = MODEL('product').Schema;\n    var round = MODULE('utils').round;\n    var async = require('async');\n    \n    instance.debug(\"Update products with this family\",\"info\");\n        \n    ProductModel.find({ sellFamily: data.family._id }, function(err, docs) {\n        if(err || !docs)\n            return instance.debug(err);\n        \n       \tasync.each(docs, function(elem, aCb) {\n            console.log(elem);\n            instance.send(1,{product:elem, userId : data.userId});\n            aCb();\n       \t}, function(err){\n       \t\tif (err)\n           \t\treturn callback(\"update productFamily error \", err);\n           \tcallback(null, 0, data);\n      \t});\n    });\n};","output":2,"outputs":1},"name":"UpdateFamilyCoef","output":2,"errors":{}},{"component":"redispublish","state":{"text":"","color":"gray"},"x":918,"y":622,"tab":"1498552695920","connections":{},"id":"1498737059143","options":{"channel":"product:updateDirectCost"},"name":"product:updateDirectCost","errors":{}},{"component":"debug","state":{"text":"Enabled","color":"gray"},"x":874,"y":637,"tab":"1498552695920","connections":{},"id":"1498739891221","options":{"enabled":true},"name":"Debug","errors":{}},{"component":"redismq","state":{"text":"","color":"gray"},"x":16,"y":662,"tab":"1498552695920","connections":{"0":["1498770223136"]},"id":"1498767289354","options":{"channel":"productFamily:coefUpdate"},"name":"coefUpdate","errors":{}},{"component":"condition","state":{"text":"","color":"gray"},"x":285,"y":394,"tab":"1498552695920","connections":{"0":["1498735846662"]},"id":"1498770223136","options":{"output":1,"condition":"// Next has to contain an index for output (null/undefiend) will cancel current data\n\nif(!value.family || !value.family._id)\n    return next();\n\nif(!value.productFamilyCoef || !value.productFamilyCoef._id)\n    return next();\n\nnext(0);"},"output":1,"name":"IsFamilyCoef","errors":{}},{"component":"condition","state":{"text":"","color":"gray"},"x":280,"y":501,"tab":"1498552695920","connections":{"0":["1498664643692"]},"id":"1498770944578","options":{"output":1,"condition":"// Next has to contain an index for output (null/undefiend) will cancel current data\n\nif(!value.family || !value.family._id)\n    return next();\n\nif(!value.family.indirectCostRate)\n \treturn next();\n\nnext(0);"},"name":"IsFamilyCost","output":1,"errors":{}},{"component":"redismq","state":{"text":"","color":"gray"},"x":21,"y":343,"tab":"1498552695920","connections":{"0":["1498770944578"]},"id":"1498771042591","options":{"channel":"productFamily:update"},"name":"update","reference":"productFamily","errors":{}},{"component":"redispop","state":{"text":"","color":"gray"},"x":13,"y":296,"tab":"1498552695920","connections":{"0":["1498770223136"]},"id":"1498771893593","options":{"method":"PubSub","channel":"productFamily:coefUpdate"},"name":"coefUpdate","reference":"productFamily","errors":{}},{"component":"redispop","state":{"text":"","color":"gray"},"x":13,"y":583,"tab":"1498552695920","connections":{"0":["1498770944578"]},"id":"1498771971248","options":{"method":"PubSub","channel":"productFamily:update"},"name":"update","reference":"productFamily","errors":{}},{"component":"redispop","state":{"text":"","color":"gray"},"x":19,"y":127,"tab":"1498552695920","connections":{"0":["1498565569369"]},"id":"1498772142216","options":{"method":"Queue","channel":"product:updateDirectCost"},"name":"updateDirectCost","reference":"product","errors":{}},{"component":"dssi","state":{"text":"Connected","color":"green"},"x":21,"y":36,"tab":"1499065218412","connections":{},"id":"1499068439358","options":{"qos":1,"port":"1883","hostname":"symeos.net","id":"45b9c68e-eb38-4630-a6f0-55dc714eaa1c","token":"ad8409775a0403c8e35e72e80e0fe2b603277d2b","uuid":"45b9c68e-eb38-4630-a6f0-55dc714eaa1c"},"name":"MQTT DSSI broker","errors":{}},{"component":"dssisubscribe","state":{"text":"Connected","color":"green"},"x":15,"y":254,"tab":"1499065218412","connections":{"0":["1499083298589"]},"id":"1499068670490","options":{"broker":"45b9c68e-eb38-4630-a6f0-55dc714eaa1c","topic":"39c66926-bdab-41b6-9630-c65a2794f681","uuid":"39c66926-bdab-41b6-9630-c65a2794f681"},"name":"Messages","errors":{}},{"component":"debug","state":{"text":"Enabled","color":"gray"},"x":836,"y":387,"tab":"1499065218412","connections":{},"id":"1499068678037","options":{"enabled":true},"errors":{}},{"component":"functiontm","state":{"text":"","color":"gray"},"x":511,"y":130,"tab":"1499065218412","connections":{"0":["1499085844043"],"2":["1499087793960"]},"id":"1499081609730","options":{"code":"function(data, instance, callback) {\n    var DeliveryModel = MODEL('order').Schema.GoodsOutNote;\n    \n    instance.send(1, data);\n    \n    DeliveryModel.findOne({ ref : new RegExp(data.ref+\"$\", \"gi\") }, function(err, doc) {\n        \t\n       \t\tif (err || !doc)\n           \t\treturn callback(\"update Delivery error \" + err);\n        \n        \tdoc.editedBy = data.data.data.userId;\n        \tdoc.status.isPicked = new Date();\n        \tdoc.status.pickedBy = data.data.data.userId;\n        \n        \tdoc.save(function(err, doc){\n                if (err || !doc)\n           \t\t\treturn callback(\"update Delivery error \" + err);\n                \n                //Info alert user\n           \t\tinstance.send(0, {\n                    userId: [data.data.data.userId],\n                    data : {\n                    \ttitle : \"Mise a jour BL\",\n                    \tmessage : {\n                        \tbody : \"BL \" + doc.ref + \"mis a jour\",\n                        \tdelay : 3000\n                        }\n                    }\n                });\n                \n                //Go to page Angular\n                instance.send(2, {\n                    userId: [data.data.data.userId],\n                    data : {\n                    \troute : 'order',\n                        go : 'delivery.show.detail',\n                    \t_id : doc._id.toString(),\n                    \tmessage : \"Mise a jour externe du BL\",\n                    }\n                });\n            });\n      \t});\n    });\n};","output":3},"name":"AddPicking","output":3,"errors":{}},{"component":"function","state":{"text":"","color":"gray"},"x":209,"y":142,"tab":"1499065218412","connections":{"0":["1499084355238"]},"id":"1499083298589","options":{"code":"var barcode = flowdata.data;\n//var type = barcode.substr(0,1);\n\nif(!barcode.data || !barcode.data.barcode)\n    return;\n\nbarcode = barcode.data.barcode;\nvar type = barcode.substr(0,1);\n\nvar obj = {\n\ttype : type\n};\n\n\nsend({\n    type : type,\n    ref : barcode.substr(4,6) + \"/\" + parseInt(barcode.substr(10,2)),\n    data:value.flowdata.data\n});","outputs":1},"name":"decode","reference":"BarCode","errors":{}},{"component":"switch","state":{"text":"","color":"gray"},"x":391,"y":245,"tab":"1499065218412","connections":{"0":["1499081609730"]},"id":"1499084355238","options":{"conditions":[{"operator":"==","datatype":"Number","value":"4","index":0},{"operator":"==","datatype":"Number","value":"5","index":1}],"property":"type"},"name":"Type","output":2,"errors":{}},{"component":"redispush","state":{"text":"","color":"gray"},"x":776,"y":70,"tab":"1499065218412","connections":{},"id":"1499085844043","options":{"method":"PubSub","channel":"notify:user"},"name":"NotifyUser","errors":{}},{"component":"redispush","state":{"text":"","color":"gray"},"x":786,"y":230,"tab":"1499065218412","connections":{},"id":"1499087793960","options":{"method":"PubSub","channel":"notify:controllerAngular"},"name":"NotifyAngular","errors":{}},{"component":"functiontm","state":{"text":"","color":"gray"},"x":890,"y":71,"tab":"1498552695920","connections":{"0":["1498563854903"]},"id":"1499197169944","options":{"code":"function(data, instance, callback) {\n    var product = data.product;\n    var ProductModel = MODEL('product').Schema;\n    var round = MODULE('utils').round;\n    var async = require('async');\n    \n    ProductModel.find({ 'bundles.id': product._id })\n    \t//.populate({ path: 'product', select: 'sellFamily', populate: { path: \"sellFamily\" } })\n        //.populate(\"priceLists\")\n        .populate(\"pack.id\", \"info directCost indirectCost\")\n        .populate(\"bundles.id\", \"info directCost indirectCost\")\n        .populate({\n        \tpath: 'info.productType'\n            //    populate: { path: \"options\" }\n        })\n        .populate({\n        \tpath: 'sellFamily',\n            populate: { path: \"options\", populate: { path: \"group\" } }\n        })\n        .exec(function(err, products) {\n        \tasync.each(products, function(product, aCb) {\n            \tif (!product.isBundle)\n                \treturn;\n                \n                product.editedBy = data.userId;\n                \n                product.save(function(err, doc){\n                    if(err)\n                        return aCb(err);\n                   \t\n                    instance.send(1,doc);\n                    aCb();\n                });\n            }, function(err){\n       \t\t\tif (err)\n           \t\t\treturn callback(\"update bundleCost error \", err);\n           \t\tcallback(null, 0, data);\n      \t\t});\n\n        \t//F.functions.PubSub.emit('product:updateDirectCost', {\n            //    data: doc\n            //});\n        });\n    });\n};","output":2,"outputs":1},"name":"UpdateBundleCost","output":2,"errors":{}},{"component":"functiontm","state":{"text":"","color":"gray"},"x":901,"y":210,"tab":"1498552695920","connections":{"0":["1498563854903"]},"id":"1499197677684","options":{"code":"function(data, instance, callback) {\n    var product = data.product;\n    var ProductModel = MODEL('product').Schema;\n    var round = MODULE('utils').round;\n    var async = require('async');\n    \n    ProductModel.find({ 'pack.id': product._id })\n    \t//.populate({ path: 'product', select: 'sellFamily', populate: { path: \"sellFamily\" } })\n        //.populate(\"priceLists\")\n        .populate(\"pack.id\", \"info directCost indirectCost\")\n        .populate({\n        \tpath: 'info.productType'\n            //    populate: { path: \"options\" }\n        })\n        .populate({\n        \tpath: 'sellFamily',\n            populate: { path: \"options\", populate: { path: \"group\" } }\n        })\n        .exec(function(err, products) {\n        \tasync.each(products, function(product, aCb) {\n            \tif (!product.isPackaging)\n                \treturn;\n                \n                product.editedBy = data.userId;\n                \n                product.save(function(err, doc){\n                    if(err)\n                        return aCb(err);\n                   \t\n                    instance.send(1,doc);\n                    aCb();\n                });\n            }, function(err){\n       \t\t\tif (err)\n           \t\t\treturn callback(\"update packCost error \", err);\n           \t\tcallback(null, 0, data);\n      \t\t});\n\n        \t//F.functions.PubSub.emit('product:updateDirectCost', {\n            //    data: doc\n            //});\n        });\n    });\n};","output":2,"outputs":1},"name":"UpdatePackCost","output":2,"errors":{}},{"component":"functiontm","state":{"text":"","color":"gray"},"x":895,"y":346,"tab":"1498552695920","connections":{"1":["1499200895965"]},"id":"1499198597901","options":{"code":"function(data, instance, callback) {\n    var product = data.product;\n    var ProductPricesModel = MODEL('productPrices').Schema;\n    var round = MODULE('utils').round;\n    var async = require('async');\n    \n     ProductPricesModel.find({ 'product': data.product._id })\n     \t//.populate({ path: 'product', select: 'sellFamily', populate: { path: \"sellFamily\" } })\n        .populate(\"priceLists\")\n        .exec(function(err, pricesList) {\n        \tasync.each(pricesList, function(prices, aCb) {\n            \tif (!prices.priceLists.isCoef)\n                \treturn aCb();\n\n                prices.editedBy = data.userId;\n                \n                prices.save(function(err, doc) {\n                \tif (err)\n                    \treturn aCb(err);\n                \t\n                    instance.send(1,{userId : data.userId, data: {priceList:doc}});\n                    aCb();\n                });\n            }, function(err){\n       \t\t\tif (err)\n           \t\t\treturn callback(\"update UpdateProductPrices error \", err);\n           \t\tcallback(null, 0, data);\n      \t\t});\n\n        \t//F.functions.PubSub.emit('product:updateDirectCost', {\n            //    data: doc\n            //});\n        });\n    });\n};","output":2,"outputs":1},"name":"UpdateProductPrices","output":2,"reference":"isCoef","errors":{}},{"component":"redispop","state":{"text":"","color":"gray"},"x":18,"y":989,"tab":"1498552695920","connections":{"0":["1499199464546"]},"id":"1499199236800","options":{"method":"Queue","channel":"productPrices:updatePrice"},"name":"updatePrice","reference":"productPrices","errors":{}},{"component":"function","state":{"text":"","color":"gray"},"x":350,"y":1009,"tab":"1498552695920","connections":{"1":["1499244049652"]},"id":"1499199464546","options":{"code":"var data = flowdata.data;\n\nif(!data.price)\n    return;\n\nif (data.price.priceLists && data.price.priceLists.cost)\n    return send(1, data);\n    \nsend(0, data);","outputs":2},"name":"isPrice","errors":{},"output":2},{"component":"debug","state":{"text":"Enabled","color":"gray"},"x":956,"y":1144,"tab":"1498552695920","connections":{},"id":"1499199616319","options":{"enabled":true},"errors":{}},{"component":"redispush","state":{"text":"","color":"gray"},"x":869,"y":521,"tab":"1498552695920","connections":{},"id":"1499200807694","options":{"method":"Queue","channel":"product:updateDirectCost"},"name":"updateDirectCost","reference":"Product","errors":{}},{"component":"redispush","state":{"text":"","color":"gray"},"x":1255,"y":529,"tab":"1498552695920","connections":{},"id":"1499200895965","options":{"method":"Queue","channel":"productPrices:updatePrice"},"name":"updatePrice","reference":"productPrices","errors":{}},{"component":"functiontm","state":{"text":"","color":"gray"},"x":949,"y":939,"tab":"1498552695920","connections":{},"id":"1499201793751","options":{"code":"function(data, instance, callback) {\n    // One element in the parent priceList changed, we must update all priceList that are parent form this priceList and are isGlobalDiscount\n    var price = data.price;\n    var ProductPricesModel = MODEL('productPrices').Schema;\n    var PriceListModel = MODEL('priceList').Schema;\n    var round = MODULE('utils').round;\n    var async = require('async');\n    \n    PriceListModel.find({ isGlobalDiscount: true, parent: price.priceLists }, function(err, docs) {\n    \tif (err || !docs || !docs.length)\n        \treturn;\n\n        //console.log(docs);\n        async.each(docs, function(doc, aCb) {\n        \t//Delete old PriceList\n            if (!price.product)\n            \treturn;\n\n            ProductPricesModel.remove({ priceLists: doc._id, product: price.product }, function(err) {\n            \tif(err)\n                    return aCb(err);\n                //Load parent priceList\n\n                var elem = price;\n                delete elem._id;\n                delete elem.__v;\n                delete elem.createdAt;\n                delete elem.updatedAt;\n                elem.priceLists = doc._id;\n                elem.editedBy = data.userId;\n                elem.createdBy = data.userId;\n\n                elem = new ProductPricesModel(elem);\n\n                for (var i = 0; i < elem.prices.length; i++) {\n                \t//console.log(elem.prices[i]);\n                    elem.prices[i].price = round(elem.prices[i].price * (1 - doc.discount / 100), 3);\n                    elem.prices[i].coef = 1;\n                    elem.prices[i].coefTotal = 1;\n                }\n\n\n                elem.save(function(err) {\n                \tif (err)\n                    \treturn aCb(err);\n                \t\n                    instance.send(1,doc);\n                    aCb();\n                });\n            }, function(err){\n       \t\t\tif (err)\n           \t\t\treturn callback(\"update updateFromParent error \", err);\n           \t\tcallback(null, 0, data);\n      \t\t});\n        });\n    });\n};","output":2,"outputs":1},"name":"updateFromParent","output":2,"errors":{}},{"component":"functiontm","state":{"text":"","color":"gray"},"x":622,"y":1147,"tab":"1498552695920","connections":{},"id":"1499244049652","options":{"code":"function(data, instance, callback) {\n    \"use strict\";\n    \n    // One element in the parent priceList changed, we must update all priceList that are parent form this priceList and are isGlobalDiscount\n    var price = data.price;\n    var ProductModel = MODEL('product').Schema;\n    var PriceListModel = MODEL('priceList').Schema;\n    var ProductFamilyCoefModel = MODEL('productFamilyCoef').Schema;\n    var round = MODULE('utils').round;\n    var async = require('async');\n    \n    async.waterfall([\n        function(cb) {\n            ProductModel.findOne({ _id: price.product }, \"info directCost indirectCost prices pack createdAt sellFamily\")\n                .populate(\"sellFamily\")\n                .exec(function(err, product) {\n                    if (err)\n                        return cb(err);\n\n                    if (!product || !product.sellFamily)\n                        return cb(\"Product with unknown family \" + product);\n\n                    return cb(null, product);\n                });\n        },\n        function(product, cb) {\n            if (price.priceLists.cost != true) \n                return cb();\n            \n             product.directCost = round(price.prices[0].price, 3);\n             product.indirectCost = round(product.directCost * product.sellFamily.indirectCostRate / 100, 3);\n             product.save(function(err, doc) {\n                if (err)\n                    return cb(err);\n\n             });\n       }\n    ], function(err){\n       \t\tif (err)\n           \t\treturn callback(\"update updateDirectCost error \" + err);\n           \t\n        callback(null, 0, data);\n\t});\n};","output":2,"outputs":1},"name":"updateDirectCost","output":2,"reference":"SP","errors":{}},{"component":"functiontm","state":{"text":"","color":"gray"},"x":634,"y":964,"tab":"1498552695920","connections":{"0":["1499199616319"]},"id":"1499260231167","options":{"code":"function(data, instance, callback) {\n    // One element in the parent priceList changed, we must update all priceList that are parent form this priceList and are isGlobalDiscount\n    var price = data.price;\n\t\n    var ProductPricesModel = MODEL('productPrices').Schema;\n    var ProductModel = MODEL('product').Schema;\n    var PriceListModel = MODEL('priceList').Schema;\n    var ProductFamilyCoefModel = MODEL('productFamilyCoef').Schema;\n    var round = MODULE('utils').round;\n    var async = require('async');\n    var _ = require('lodash');\n\n    async.waterfall([\n            function(cb) {\n                instance.debug(\"toto\");\n                // Re-calcul all prices 1/2 get product\n                ProductModel.findOne({ _id: price.product }, \"info directCost indirectCost prices pack createdAt sellFamily\")\n                    .populate(\"sellFamily\")\n                    .exec(function(err, product) {\n                        if (err)\n                            return cb(err);\n\n                        if (!product || !product.sellFamily)\n                            return cb(\"Product with unknown family \" + product);\n\n                        return cb(null, product);\n                    });\n            },\n            function(product, cb) {\n                instance.debug(\"toto\");\n                // Re-calcul price 2/2 from Family Coef\n                ProductFamilyCoefModel.findOne({ family: product.sellFamily._id, priceLists: price.priceLists._id }, \"coef\", function(err, family) {\n                    if (err)\n                        return cb(err);\n\n                    if (!family || !family.coef)\n                        family = { coef: 1 };\n\n                    console.log(family);\n                    console.log(price);\n                    //return;\n                    var coef = price.priceLists.isCoef;\n\n                    /* coef mode */\n                    if (!coef)\n                        return cb(null, product, coef);\n\n                    //Recalcul product prices\n                    price.prices = [];\n\n                    if (!product.sellFamily.discounts.length)\n                        console.log('Error family configuration : no discount', product.sellFamily._id);\n\n                    for (var i = 0; i < product.sellFamily.discounts.length; i++) {\n                        var ObjPrice = {};\n                        ObjPrice.count = product.sellFamily.discounts[i].count;\n                        ObjPrice.coef = (family && family.coef || 1) * (1 - product.sellFamily.discounts[i].discount / 100);\n                        ObjPrice.price = round(product.totalCost * ObjPrice.coef, 3);\n                        price.prices.push(ObjPrice);\n                    }\n                    cb(null, product, coef);\n                });\n            },\n            function(product, coef, cb) {\n                if (price.priceLists.defaultPriceList != true || price.prices.length)\n                    return cb(null, coef);\n\n                product.update({ $set: { 'prices.pu_ht': price.prices[0].price } }, function(err, doc) {\n                    if (err)\n                        return cb(err);\n\n                    cb(null, coef);\n                });\n            },\n            //Ordering prices discount by qty\n            function(coef, cb) {\n                // No update price or not Coef\n                if (!coef || !price.prices)\n                    return cb(null, coef);\n\n                price.prices = _.filter(price.prices, function(p) {\n                    if (p.count == 0)\n                        return true;\n\n                    return (p.price !== 0)\n                });\n\n                price.prices = _.uniq(price.prices, 'count');\n\n                function compare(a, b) {\n                    if (a.count < b.count)\n                        return -1;\n                    if (a.count > b.count)\n                        return 1;\n                    return 0;\n                }\n\n                price.prices.sort(compare);\n                cb(null, coef);\n            },\n            function(coef, cb) {\n                // Update price\n                // Just update one price in priceList\n                if (!coef)\n                    return cb(null, price);\n\n                ProductPricesModel.findByIdAndUpdate(price._id, price, { new: true }, function(err, doc) {\n                    doc.populate(\"priceLists\", \"cost isCoef\", function(err, doc) {\n                        if (err)\n                            return cb(err);\n\n                        cb(null, doc);\n                    });\n                });\n            }\n        ],\n        function(err, doc) {\n            if (err)\n                return callback(\"update updateDirectCost error \" + err);\n\n            callback(null, 0, { userId: data.userId, price: doc });\n        });\n};","output":1,"outputs":1},"name":"RefreshPriceCoef","output":1,"reference":""}]}